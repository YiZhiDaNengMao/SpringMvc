SpringMVC

一、MVC设计模式:
  1)数据模型层(Model):指在工程中的JavBean,作用是处理封装数据
  	JavaBean两大分类:
  	  ①.实体类JavaBean,专门用于存储业务数据的.
  	  ②.业务处理JavaBean,指的是service或者dao对象,专门用于处理业务逻辑和数据的访问

  2)视图(View):指的是工程中的html或者jsp等页面,作用是与用户进行交互,展示数据

  3)控制层(Controller):指的是工程中的servlet,作用是接收请求和响应数据


二、SpringMVC概述
  1)概念
  	SpringMVC 是Spring提供的一个基于MVC设计模式的轻量级Web开发框架, 本质上相当于Servlet

  2)优点
  	a.基于MVC设计模式上有明确的分工.做到最大程度的解耦合

  	b.SpringMVC是Spring的后续产品,所以能够使用Spring中的IOC 和AOP的特性.


三、XML配置SpringMVC
  1)使用步骤
  	a.创建web项目,导入SpringMVC相关坐标
  	b.在web.xml中配置SpringMVC的前端控制器
  	c.编写Controller类和视图页面(jsp/html)
  	d.使用注解配置Controller中的业务方法和映射路径
  	e.配置SpringMVC核心文件 spring-mvc.xml


四、SpringMVC中的常用组件
  1)DispatcherServlet：前端控制器
    作用: 完成所有组件之间的调用关系,做到最大的解耦合.

  2)HandlerMapping：处理器映射器
    作用:根据请求的url路径,通过不同的配置方式,找到对应的处理器(controller方法),也就是查询对应的方法.

  3)Handler：处理器 (程序员编写方法)

  4)HandlAdapter：处理器适配器
    作用:根据映射器找到对应的处理器的信息,按照处理相关的指定的规则处理器,也就是执行对应的方法.

  5)View Resolver：视图解析器
    作用:解析方法的返回值,得到一个完整的视图路径

  6)View：视图


五、SpringMVC的注解解析
1.@Controller注解
  类型:类注解
  位置:SpringMVC的控制器类定义的上方
  作用:设置SpringMVC的核心控制器的bean对象

2.@RequestMapping注解 
  类型 / 作用:
    类注解: 设置映射请求的请求路径的初始信息
    方法注解: 设置映射请求的请求路径的具体信息

  位置:SpringMVC控制器类上方 / 方法定义的上方

  1)value属性
    a.value属性是通过 请求的请求地址匹配请求映射.
    b.value属性是一个字符串类型的数组,表示该请求映射能够匹配多个请求地址所对应的请求
    c.value属性是必须设置的,否则找不到映射地址.

  2)method属性
    a.method属性是通过 请求的请求方式匹配请求映射.
    b.method属性是一个RequestMethod数组类型,表示请求映射能够匹配多种请求方式的请求

  3)params属性
    a.params属性是通过 请求的请求参数匹配请求映射.
    b.params属性是一个字符串类型的数组,表示该请求映射能够匹配多个请求参数

3.@RequestMapping的派生注解  
  处理指定的请求方式的控制器方法提供了以下注解:
    1)处理get请求的映射: @GetMapping
    2)处理post请求的映射: @PostMapping
    3)处理put请求的映射: @PutMapping
    4)处理delete请求的映射: @DeleteMapping

4.SpringMVC支持ant风格的路径格式
  1)理解: 使用特殊字符对访问路径进行模糊匹配.

  2)特殊字符:
    a.【？】：表示单个字符
    b.【*】：表示任意个字符(0 或 n)
      注意: 有两个字符不能进行匹配
        / : 表示一层目录
        ? : 表示拼接的请求参数

    c.【**】：表示任意的一层或者多层
      注意: 使用【**】的前后不能有字符,否则【**】会按照单个【*】进行解析

5.SpringMVC支持路径中的占位符
  占位符: { }

  SpringMVC中的占位符常用于restful风格中.当请求路径中将某些数据通过路径的方式传输到服务器中,就可以在相应的 @RequestMapping注解的value属性中通过占位符{xxx}表示传输的数据.

  再通过@PathVariable注解,将占位符所表示的数据赋值给控制器方法的形参上.


六、Controller控制器加载 - bean
  1)SpringMVC控制的bean(表现层的bean)

  2)Spring控制的bean
    a.业务层的bean(service)
    b.功能相关bean(Datasource)
    c.数据层的bean(dao/mapper)

  3)解决方式
    方式一:使用细粒度加载方式,也就是单个模块包进行加载
    方式二:扫描总包,然后将SpringMVC控制的bean排除在外

七、请求
1.请求参数类型
  a.普通类型参数
    普通参数：url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数

    注意: 当请求参数名与形参变量名不同，使用@RequestParam绑定参数关系

  b.pojo类型参数
    pojo参数：请求参数名与形参对象属性名相同，定义pojo类型形参即可接收参数

    注意:请求参数key的名称要和pojo中属性的名称一致，否则无法封装。

  c.嵌套pojo类型参数
    嵌套POJO参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数

  d.数组类型参数
    数组参数：请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型即可接收参数

  e.集合类型参数
    集合保存普通参数：请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam绑定参数关系

    注意:url传递参数过程中,只要是名字能对应上的,都可以直接传递,如果名称不一致,则使用@RequestParam对应即可.

2.Json数据参数传递
  1)json普通数组:
    语法格式:
      ["","",","",....]

  2)json对象: 
    语法格式: 
      {key:value,key:value....}
    
    pojo参数：json数据与形参对象属性名相同，定义pojo类型形参即可接收参数

  3)json对象数组:
    语法格式:
      [
        {key:value,key:value....},
        {key:value,key:value....},
        {key:value,key:value....}
      ]

    pojo集合参数：json数组数据与集合泛型属性名相同，定义List类型形参即可接收参数

3.日期类型的参数传递
  常见格式:
    a.2048-08-08
    b.2048/08/08(标准格式)
    c.08/08/2048

  注意: 不安标准格式传值,就会出现转换错误,可以使用@DateTimeFormat注解设置日期类型数据格式.

5.常用注解
  1)@RequestParam注解
    类型:形参注解
    位置：SpringMVC控制器方法形参定义前面
    作用：绑定请求参数与处理器方法形参间的关系

  2)@EnableWebMvc注解
    类型：配置类注解
    位置：SpringMVC配置类定义上方
    作用：开启SpringMVC多项辅助功能

  3)@RequestBody注解
    类型：形参注解
    位置：SpringMVC控制器方法形参定义前面
    作用：将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次

  4)@DateTimeFormat注解
    类型：形参注解
    位置：SpringMVC控制器方法形参前面
    作用：设定日期时间型数据格式
    属性：pattern -> 指定日期时间格式字符串

  5)@ResponseBody注解
    类型：方法注解
    位置：SpringMVC控制器方法定义上方
    作用：设置当前控制器返回值作为响应体
      ①.返回值是String，内容就是响应体
      ②.返回值是对象,就会转成可识别的数据,再进行响应
      ③.有了这注解才能激活类型的自动转换

4.@RequestParam 和 @RequestBody的区别
  @RequestParam:用于接收url地址参数,或者表单传递的参数

  @RequestBody:专门用于接收json数据


八、响应
1.响应的方式 
  1)页面跳转(响应页面)
    a.返回字符串逻辑视图(重定向 / 转发)
    b.void原始操作ServletAPI
    c.ModelAndView

  2)返回数据(响应数据)
    直接返回字符串数据(文本数据,json)


九、RESTFul
1.概述
  RESTFul(Representational State Transfer):表现层资源表述状态转移

  总结: rest风格,描述的就是一种访问资源的方式

2.rest的访问方式和以前访问方式的对比
  以前访问方式:
    http://localhost/user/getById?id=1
    http://localhost/user/byId?id=1

    http://localhost/user/deleteById?id=1
    http://localhost/user/deleteById?ids=1

  rest的访问方式:
    http://localhost/user/1
    http://localhost/user/1

3.rest风格语法
  1) URL只能用来标识和定位资源,不可以包含任何与操作相关的动态词
    例如: 
      查询全部-> http://localhost/user  

  2) 当请求中需要携带参数时,rest允许我们将参数通过 / 拼接到URL中,将请求参数作为URL的一部分传输到服务器中, 
  而不是像以前一样使用?拼接键值对的方式来携带参数.
    例如:
      根据id查询-> http://localhost/user/1

  3)HTTP协议中有4个代表操作方式的动态词: 
    GET:用来获取资源(查询)
    POST:用来新建资源(新增)
    PUT:用来更新资源(修改)
    DELETE:用来删除资源(删除)


4.常见注解
  1)@PathVariable注解
    类型：形参注解
    位置：SpringMVC控制器方法形参定义前面
    作用：绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应

  2)@GetMapping、@PostMapping、@PutMapping、@DeleteMapping
    类型：方法注解
    位置：基于SpringMVC的RESTful开发控制器方法定义上方
    作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求

  3)@RestController
    类型：类注解
    位置：基于SpringMVC的RESTful开发控制器类定义上方
    作用：设置当前控制器类为RESTful风格，等同于@Controller与@ResponseBody两个注解组合功能


5.@RequestBody、@RequestParam、@PathVariable区别和应用
  区别:
    a.@RequestParam用于接收url地址传参或表单传参
    b.@RequestBody用于接收json数据
    c.@PathVariable用于接收路径参数，使用{参数名称}描述路径参数

  应用:
    a.发送请求参数超过1个时，以json格式为主，@RequestBody应用较广
    b.如果发送非json格式数据，选用@RequestParam接收请求参数
    c.采用RESTful进行开发，当参数数量较少时，例如:1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值



十、SSM整合
1.配置类整合
  Spring
    |- SpringConfig

  MyBatis
    |- MyBatisConfig
    |- JdbcConfig
    |- jdbc.properties

  SpringMVC
    |- SpringMvcConfig
    |- ServletConfig

2.功能模块整合
  1)表和实体类
  2)dao层(接口 + 自动代理)
  3)service层(接口 + 实现类)
    业务层接口(测试Junit)
  4)controller层(实现类)
    表现层实现类(测试PostMan)

3.表现层数据封装
  目的: 统一响应结果的格式
  使用步骤:
    1)定义Result类封装响应结果
      属性分析:
        a.数据封装到data属性中,用于存储数据统一格式
        b.封装操作结果到code属性中,用于区分操作
        c.封装特殊信息到msg属性中,用于表示可选操作
      注意:
        Result类中的字段并不是固定的,可以根据自行需要进行定义

    2)定义Code类封装响应码
      属性分析:
        a.该类中的响应码都是静态常量
        b.定义具体数值表示响应成功或失败的具体信息


4.异常处理器
  1)核心:基于AOP思想实现的
    目的: 集中,统一的处理项目中出现的所有的异常.

  2)出现异常现象的常见位置
    ①.框架内部抛出的异常:使用框架符合规范导致的问题
      例如: 在MyBatis,Spring,SpringMVC书写配置文件时,写错了东西,会导致发生异常

    ②.数据层抛出的异常: 因为外部服务器故障导致的问题
      例如:
        a.服务器访问超时
        b.sql语句编写错误,导致异常

    ③.业务层抛出的异常: 因为业务逻辑书写错误
      例如:
        a.获取数据是遍历数据

    ④.表现层抛出的异常: 因为收集数据,校验数据
      例如:
        a.不匹配的数据类型间接导致的异常

    ⑤.工具类抛出的异常: 书写不规范不严谨
      例如:

  3)项目中出现的异常类型(自定义异常)
    ①.业务异常(BusinessException)
    ②.系统异常(SystemException)
    ③.其他异常(Exception)





















________________________________________________
面试题:
1. / 和 /* 的区别
2.SpringMVC的三大组件是什么?
  a.HandlerMapping：处理器映射器
  b.HandlAdapter：处理器适配器
  c.View Resolver：视图解析器

